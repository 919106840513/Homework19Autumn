第十四次作业
 174.14.（1）
 #include<iostream>
#include<math.h>
using namespace std;
//构建结构体确定方程的根和根的个数。 
struct Result{
	double x,x1,x2;
	int count;
};
//构建返回值为结构体的函数，方程系数作为实参，判断方程根的个数并且为结构体赋值。 
Result f(int a,int b,int c)
{
	Result R;
	double delta=b*b-4*a*c;
	if(delta<0)
	   R.count=0;
	else if(delta==0)
	   {
	   	R.count=1;
	   	R.x=-b/2/a;
	   }
	else
	{
		R.count=2;
		R.x1=(-b+sqrt(delta))/2/a;
		R.x2=(-b-sqrt(delta))/2/a;
	}
	return R;  
}
int main(){
	int a,b,c;
	cin>>a>>b>>c;
	Result result=f(a,b,c);
	if(result.count==0)
		cout<<"The equation has no roots"<<endl;
	else if(result.count==1)
	    cout<<"The equation has one root :x="<<result.x<<endl;
	else
	    cout<<"The equation has two roots :x1="<<result.x1<<"  x2= "<<result.x2<<endl;
	return 0;
}
（2）
#include<iostream>
#include<math.h>
using namespace std;
//构建点坐标的结构体
struct point {
	double x, y;
};
//编写求两点间距离的函数
double distance(point point1, point point2) //以结构体为形参，调用x,y代入计算 
{
	double d = sqrt(pow((point1.x - point2.x), 2) + pow((point1.y - point2.y), 2));
	return d;
}
//构建三角形结构体，成员是三边长. 
struct triangle {
	double d1 ;
	double d2 ;
	double d3 ;
};
//计算三角形周长和面积，三角形结构体引用作为形参 
double getperimeter(triangle &t1)
{
	return t1.d1 + t1.d2 + t1.d3;
}
double getarea(triangle &t1)
{
	return sqrt(getperimeter(t1)*(getperimeter(t1) - t1.d1)*(getperimeter(t1) - t1.d2)*(getperimeter(t1) - t1.d3));
}
//main函数
int main() {
	point p1, p2, p3;
	double x1, y1;
	cin >> x1 >> y1;
	p1 = { x1,y1 };
	double x2, y2;
	cin >> x2 >> y2;
	p2 = { x2,y2 };
	double x3, y3;
	cin >> x3 >> y3;
	p3 = { x3,y3 };

	triangle T = { distance(p1,p2),distance(p1,p3),distance(p2,p3) };//结构体triangle的初始化！区别在结构体里面初始化的话，再加上另一个结构体point类型的成员，不好搞。
	if (fabs(T.d1 + T.d2) > T.d3 && fabs(T.d1 - T.d2) < T.d3)
	{
		cout << "T's perimeter is " << getperimeter(T) << endl;
		cout << "T's area is " << getarea(T) << endl;
	}
	else
		cout << "points p1,p2,p3 can't form triangle! ";
	system("pause");
	return 0;

}
附加：将字符串中大写字母改为小写。
#include<iostream>
using namespace std;
int main() {
	char a[50];
	cin.getline(a, 50); 
	cout << "before:" << a << endl;
	for (int i = 0; i < 50; i++)
	{
		if (a[i] >= 'A'&&a[i] <= 'Z')
			a[i] = a[i]+32;
	}
	cout << "after:" << a << endl;
	system("pause");
	return 0;
}
