#include <iostream>
using namespace std;
const int n=50;
int main (){
	char a[n];
	cin.getline(a,n);
	cout<<a;
	cout<<endl;
		for (int i=0;a[i];i++){
		if (a[i]>='A'&&a[i]<='Z')
			a[i]+='a'-'A';
	}
	cout<<a;
} 




#include <iostream>           
#include <math.h>            
using namespace std;
struct solution{
	double x1,x2;
	}; 
solution f(int a,int b,int c){
	solution s;
	float n;
	n=b*b-4*a*c;
	  s.x1=(-1*b-sqrt(n))/(2*a);
	  s.x2=(-1*b+sqrt(n))/(2*a);
	  return s;
    }		        
   
int main(){
	int a,b,c,n;
	solution s;
	cin>>a>>b>>c;
	if(b*b-4*a*c<0)
	cout<<"erorr";
	else
	{f(a,b,c);
	cin>>n;//n为0输出x1,x2;n为1输出x1; n为2输出x2;
	switch(n){
		case 0:cout<<s.x1<<' '<<s.x2;break;
		case 1:cout<<s.x1;break;
		case 2:cout<<s.x2;break;
	}
	}
	
}



using namespace std;
#include<iostrem>
#include<cmath>
struct Point{
	int x;
	int y;
};

double dis(Point m,Point n)
{
	double distance=sqrt((m.x-n.x)*(m.x-n.x)+(m.y-n.y)*(m.y-n.y));
	return distance;
}

struct tri{
	Point a;
	Point b;
	Point c;
};

int main()
{
	double l1=dis(tri.a,tri.b);
	double l2=dis(tri.a,tri.c);
	double l3=dis(tri.c,tri.b);
	double sum1=l2+l3;
	double sum2=l1+l3;
	double sum3=l1+l2;
	if(sum1>l1&&sum2>l1&&sum3>l3)
	{
		double C=l1+l2+l3;
		double p=(l1+l2+l3)/2;
		double S=sqrt(p(p-a)(p-b)(p-c))
	}
	return 0;
}
