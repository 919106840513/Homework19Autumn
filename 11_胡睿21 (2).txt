#include<iostream>
using namespace std;
/*逆序创建
Node*createRev(const int a[],int n){   //新建节点插入链首 
		Node*head=NULL;
		Node*p1;
		for(int i=0;i<n;i++)
		{
			p1=new Node;
			p1->data=a[i];
			p1->next=head;
			head=p1;
		}
	return head;
}

*/ 
struct Node{
	int data;
	Node*next;
};
struct linkedlist{
	Node*head;
	int size;
};
linkedlist creat(){
	linkedlist list;
	list.head=0;
	list.size=0;
	return list;
}
linkedlist creat(const int a[],int n){     //创建链表 
	linkedlist list=creat();
	Node*p1,*p2;   //也可不用前一个函数先create 直接说明 Node*head=NULL; 
	for(int i=0;i<n;i++){
		p1=new Node;
		p1->data=a[i];
		p1->next=NULL;
		if(list.head==0)
			list.head=p1;
		else p2->next=p1;
		
		p2=p1;	   //第一次循环时就已经让p2.p1指向同一节点了   //尾插法   p2总会指向链尾节点 
	}
	list.size=n;
	return list;
}
void print(const linkedlist &list){   //const说明链表节点值不能被改变 
	cout<<"size="<<list.size<<":";
	Node*p=list.head;
	while(p!=NULL){
		cout<<p->data<<" ";
		p=p->next;
	}
	cout<<"\n";
} 
void removeAll(linkedlist &list){     //引用。函数中对形参的操作直接对应对实参的操作 
	Node*p1;
	while(list.head!=NULL){
		p1=list.head;
		list.head=list.head->next;
		delete p1;
	}
	list.size=0;
}


//节点删除
bool Delete_one_node(Node* &head,int num)  //第一个形参是 链表头指针 
{
	Node*p1,*p2;
	if(head==NULL) return false;
	if(head->data==num)
	{
		p1=head;
		head=head->next;
		delete p1;
	}
	//再遍历链表节点
	p1=p2=head;
	while(p2->data!=num&&p2->next!=NULL)
	{
		p1=p2;  //p1跟着p2 
		p2=p2->next;
	} 
	if(p2->data==num)
	{
		p1->next=p2->next;     /*核心*/ 
		delete p2;
		return true;
	} 
	
	return false;  //否则失败 

} 
 
 
 
//节点添加 
void insertAsc(Node* &head,Node*p)   //按照data大小进行排序添加 p节点 
{
	if(head==NULL||p->data < head->data)
	{
		p->next=head;
		head=p;
		return; 
	} 
	Node*p1,*p2;
	p1=p2=head;
	while(p2!=NULL&&p2->data < p->data)     //找到一个节点值小于p   p1 p2分别给此节点与下一个节点，向内插值。 
	{
		p1=p2;
		p2=p2->next;
	}
	p->next=p2;    /*核心*/
	p1->next=p;

}
int main(){
	int a[]={200,400,300,500};
	linkedlist list1=creat(a,sizeof(a)/4);
	print(list1);
	removeAll(list1);
	return 0;
}

























