1.
#include <iostream>
#include <string>
#include <math.h>
using namespace std;
struct Fraction
{
	int a;
	int b;

};
int gys(int a, int b)
{
	if (b != 0)
		return gys(b, a%b);
	else
		return a;
}
int gbs(int a, int b)
{
	return a * b / gys(a, b);
}
Fraction *fc(Fraction *a)
{
	Fraction b;
	Fraction *w;
	w = &b;
	if (a->a == 0)
	{
		w->a = 0;
		w->b = 1;
	}
	if (a > 0)
	{
		int e = gys(a->a,a->b);
		w->a = a->a / e;
		w->b = a->b / e;
	}
	if (a < 0)
	{
		int e = gys(-1 * a->a,a-> b);
		w->a = a->a / e;
		w->b = a->b / e;
	}
	return w;
}
Fraction *add(Fraction *a1, Fraction *a2)
{
	int c = gbs(a1->b, a2->b);
	a1->b = c;
	a2->b = c;
	a1->a = c / a1->b*a1->a;
	a2->a = c / a2->b*a2->a;
	a1->a = a1->a + a2->a;
	Fraction *w = fc(a1);
	return w;
}
Fraction *sub(Fraction *a1, Fraction *a2)
{
	int c = gbs(a1->b, a2->b);
	a1->b = c;
	a2->b = c;
	a1->a = c / a1->b*a1->a;
	a2->a = c / a2->b*a2->a;
	a1->a =a1->a - a2->a ;
	Fraction *w = fc(a1);
	return w;
}
Fraction *mul(Fraction *a1, Fraction *a2)
{
	a1->a = a1->a*a2->a;
	a1->b = a1->b*a2->b;
	Fraction *w = fc(a1);
	return w;
}
Fraction *div(Fraction *a1, Fraction *a2)
{
	int s = a2->a;
	a2->a = a2->b;
	a2->b = s;
	return mul(a1, a2);
}
void judge(Fraction *a1, Fraction *a2)//输入最简的分数形式！
{
	Fraction *w = sub(a1, a2);
	if (w->a == 0)
	{
		printf("相等");
	}
	if (w->a > 0)
	{
		printf("第一个数大");
	}
	if (w->a < 0)
	{
		printf("第二个数大");
	}
	
}

int main()
{
	system("pause");
	return 0;
}
2.#include <iostream>
#include <string>
#include <math.h>
using namespace std;
enum Method
{
	hundred_point=0,
	grade_point=0,	
};
struct Course
{
	char Serial_number[20];
	string name;
	Method way;

};

union myscore
{
	int p_score;
	char g_score;
};
struct grade
{
	char number[11];
	string name;
	char course_number[20];
	myscore score;
};
int main()
{
	system("pause");
	return 0;
}